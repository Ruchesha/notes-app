pipeline {
    
    agent any
    environment {
        SONAR_HOME = tool 'sonar'
    }
    
    stages {
        stage("code"){
            steps{
                git url: "https://github.com/Ruchesha/notes-app.git" ,  branch: "master"
                echo "code cloning"
            }
        }
        stage("Code analysis and Dependency check"){
            parallel{
                stage("Sonarqube analysis"){
                    steps{
                        withSonarQubeEnv("sonar"){
                        sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=notesapp -Dsonar.projectKey=notesapp -X"
                        echo "Build tested successfully"
                        }
                    }
                }
                stage("OWASP"){
                    steps{
                        dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'OWASP'
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                        echo "Build tested successfully"
                    }
                }
            }
        }
        stage("Sonarqube Quality gates"){
            steps{
                timeout(time: 1, unit: "MINUTES"){
                    waitForQualityGate abortPipeline:false
                }
            }
        }
        stage("Build"){
            steps{
                sh "docker build -t notes-app-new:latest ."
                echo "docker image created"
            }
        }
        stage("Trivy"){
            steps{
                sh "trivy image notes-app-new"
                echo "Image scanned successfully"
            }
        }
        stage("Push to Dockerhub"){
            steps{
                withCredentials([usernamePassword(credentialsId:"docker",passwordVariable:"dockerHubPass",usernameVariable:"dockerHubUser")]){
                sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPass}"
                sh "docker tag notes-app-new:latest ${env.dockerHubUser}/notes-app-new:latest"
                sh "docker push ${env.dockerHubUser}/notes-app-new:latest"
                echo "Image pushed to dockerhub"
                    
                }
            }
        }
        stage("Deploy"){
            steps{
                sh "docker compose up -d"
                echo "App deployed successfully"
            }
        }
        
    }
}
